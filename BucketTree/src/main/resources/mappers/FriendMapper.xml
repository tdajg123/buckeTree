<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.ac.BucketTree.FriendMapper">
	<!-- 메신저에서 쓸 친구 목록(새로운메세지 보낸 친구 제외) -->
	<select id="FriendByMessagener" resultType="kr.ac.BucketTree.vo.FriendVO">
		SELECT u.idx, u.name, u.email
		FROM Friend f join [User] u
		on f.toUser=u.idx
		where (f.fromUser=#{idx} and f.state=1) AND 
		( #{p.srchType}=0 OR (#{p.srchType}=1 AND CHARINDEX(#{p.srchText},u.name) =1))
		and u.idx not IN (SELECT u.idx FROM [USER] u   
		                 WHERE u.idx IN(
		                 SELECT from_user_idx
		                 FROM Messenger
		                 WHERE to_user_idx =#{idx} and type=1)
	                     )
	</select>
	<!--메세지=>새로운 메세지를 보낸 친구목록 -->
	<select id="FriendByNewMessagener" resultType="kr.ac.BucketTree.vo.FriendVO">
	SELECT  u.idx, u.name, u.email
    FROM [USER] u
    WHERE u.idx IN(
    SELECT from_user_idx
    FROM Messenger 
    WHERE to_user_idx =#{idx} and type=1
    )
	</select>
	
	<!-- 친구 목록 -->
	<select id="FriendList" resultType="kr.ac.BucketTree.vo.FriendVO">
	SELECT* 
	FROM(
	SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as 행번호
	FROM [User]
	where idx in( SELECT toUser FROM Friend where fromUser=#{idx} AND state =1)
	)subquery
	<![CDATA[
	WHERE 행번호 > (#{p.currentPage} - 1) * #{p.pageSize} AND 행번호 <= #{p.currentPage} * #{p.pageSize} 
	]]>
	ORDER BY 행번호
	
	</select>
	
	<!--친구 목록 추가 조회 (무한 스크롤)  -->
	
	<select id="FriendListAjax" resultType="kr.ac.BucketTree.vo.FriendVO">
	SELECT* 
	FROM(
	SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as 행번호
	FROM [User]
	where idx in( SELECT toUser FROM Friend where fromUser=#{idx} AND state =1)
	)subquery
	<![CDATA[
	WHERE row > #{p.row} AND row <= #{p.row} + #{p.pageSize}
	]]>
	ORDER BY 행번호
	</select>
	<!-- 검색된 친구목록 -->
	<select id="FriendSearch" resultType="kr.ac.BucketTree.vo.FriendVO">
		SELECT * 
		FROM(
		SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
		FROM [User] 
		where (#{p.srchType}=1 AND (name like #{p.srchText}) OR (#{p.srchType}=2 AND email = #{p.srchText})) AND
		idx not in (SELECT toUser FROM Friend where fromUser=#{idx}))
		subquery
			<![CDATA[
		WHERE row > (#{p.currentPage} - 1) * #{p.pageSize} AND row <= #{p.currentPage} * #{p.pageSize} 
		]]>
		ORDER BY row
	</select>
	<!-- 친구목록 내 검색 -->
	<select id="SearchFriendList" resultType="kr.ac.BucketTree.vo.FriendVO">
		SELECT * 
		FROM(
		SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
		FROM [User] 
		where (#{p.srchType}=1 AND (name like #{p.srchText}) OR (#{p.srchType}=2 AND email = #{p.srchText})) AND
		idx in(SELECT toUser FROM Friend where fromUser=#{idx} AND state =1)
		)subquery
			<![CDATA[
		WHERE row > (#{p.currentPage} - 1) * #{p.pageSize} AND row <= #{p.currentPage} * #{p.pageSize} 
		]]>
		ORDER BY row
	
	</select>
	<!-- 검색된 친구 목록 ajax 조회 (무한 스크롤) -->
	<select id="FriendAjaxSearch" resultType="kr.ac.BucketTree.vo.FriendVO">
     	SELECT * 
		FROM(
		SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
		FROM [User] 
		where (#{p.srchType}=1 AND (name like #{p.srchText}) OR (#{p.srchType}=2 AND email = #{p.srchText})) AND
		idx not in (SELECT toUser FROM Friend where fromUser=#{idx}))
		subquery
		<![CDATA[
		WHERE row > #{p.row} AND row <= #{p.row} + #{p.pageSize}
		]]>
		ORDER BY row
	</select>
	<!-- 전송한 친구 요청  ajax 조회 (무한 스크롤)-->
	<select id="FriendSendAjaxList" resultType="kr.ac.BucketTree.vo.FriendVO">
	SELECT* 
	FROM(
	SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
	FROM [User]
	where idx in( SELECT toUser FROM Friend where fromUser=#{idx} AND state =2)
	)subquery
	<![CDATA[
	WHERE row > #{p.row} AND row <= #{p.row} + #{p.pageSize}
	]]>
	ORDER BY row
	
	</select>
	
	
	<!-- 친구 요청 from ~ to -->
	<insert id="insertFriendFromRequest">
	INSERT INTO FRIEND VALUES(#{fromUser},#{toUser},2);
	</insert>
	
	<!-- 친구 요청 to ~ from -->	
	<insert id="insertFriendToRequest">
	INSERT INTO FRIEND VALUES(#{toUser},#{fromUser},3);
	</insert>
	
	<!-- 친구 삭제 from ~to -->
	<delete id="deleteFromFriend">
	DELETE FROM FRIEND WHERE fromUser=#{fromUser} AND toUser = #{toUser};
	</delete>
	
	<!-- 친구 삭제 to ~ from -->
	<delete id="deleteToFriend">
	DELETE FROM FRIEND WHERE fromUser=#{toUser} AND toUser = #{fromUser};
	</delete>
	
	<!--받은 친구 요청  목록-->
	<select id="selectRequestFriend" resultType="kr.ac.BucketTree.vo.FriendVO">
	SELECT* 
	FROM(
	SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
	FROM [User]
	where idx in(select toUser FROM Friend where fromUser=#{idx} and state=3)
	)subquery
	<![CDATA[
	WHERE row > (#{p.currentPage} - 1) * #{p.pageSize} AND row <= #{p.currentPage} * #{p.pageSize} 
	]]>
	ORDER BY row
	</select>
	
	<!-- 신청한 친구 요청 목록 -->
	<select id="selectSendFriend" resultType="kr.ac.BucketTree.vo.FriendVO">
	SELECT* 
	FROM(
	SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
	FROM [User]
	where idx in(select toUser FROM Friend where fromUser=#{idx} and state=2)
	)subquery
	<![CDATA[
	WHERE row > (#{p.currentPage} - 1) * #{p.pageSize} AND row <= #{p.currentPage} * #{p.pageSize} 
	]]>
	ORDER BY row
	</select>
	<!--친구 수락  from > to -->
	<update id="updateRequestFromFriend">
	UPDATE FRIEND SET state=1 WHERE fromUser=#{fromUser} and toUser=#{toUser}
	</update>
	
	<!--친구 수락  to > from -->
	<update id="updateRequestToFriend">
	UPDATE FRIEND SET state=1 WHERE fromUser=#{toUser} and toUser=#{fromUser}
	</update>
	
	<!--친구 거절 -->
	<delete id="deleteRequestFromFriend">
	Delete FROM FRIEND WHERE fromUser=#{fromUser} and toUser=#{toUser} and state=2
	</delete>

	<!--친구 거절 -->
	<delete id="deleteRequestToFriend">
	Delete FROM FRIEND WHERE fromUser=#{toUser} and toUser=#{fromUser} and state=2
	</delete>
	
	<!-- idx로 친구조회 -->
	<select id="selectByIdFriend" resultType="kr.ac.BucketTree.vo.FriendVO">
	SELECT *
	FROM [USER]
	WHERE idx=#{idx}
	
	</select>
	
	<!-- 친구가 아닌 유저 목록 -->
	<select id="UserSearch" resultType="kr.ac.BucketTree.vo.FriendVO">
		SELECT * 
		FROM(
		SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
		FROM [User] 
		where idx not in (SELECT toUser FROM Friend where fromUser=#{idx}))
		subquery
			<![CDATA[
		WHERE row > (#{p.currentPage} - 1) * #{p.pageSize} AND row <= #{p.currentPage} * #{p.pageSize} 
		]]>
		ORDER BY row
	</select>
	
	<!-- 친구가 아닌 유저목록 Ajax 추가 조회 -->
	<select id="UserSearchAjax" resultType="kr.ac.BucketTree.vo.UserVO">
		SELECT * 
		FROM(
		SELECT * ,ROW_NUMBER() OVER(ORDER BY [User].name) as row
		FROM [User] 
		where idx not in (SELECT toUser FROM Friend where fromUser=#{idx}))
		subquery
	<![CDATA[
		WHERE row > #{p.row} AND row <= #{p.row} + #{p.pageSize}
		]]>
		ORDER BY row	
	</select>
	
	
</mapper>